(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{496:function(v,a,t){"use strict";t.r(a);var _=t(2),r=Object(_.a)({},(function(){var v=this,a=v._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h1",{attrs:{id:"图解google-v8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图解google-v8"}},[v._v("#")]),v._v(" 图解Google V8")]),v._v(" "),a("p",[v._v("李兵·前盛大创新院高级研究员")]),v._v(" "),a("h2",{attrs:{id:"宏观视角"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#宏观视角"}},[v._v("#")]),v._v(" 宏观视角")]),v._v(" "),a("h3",{attrs:{id:"开篇词-如何学习谷歌高性能-javascript-引擎v8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开篇词-如何学习谷歌高性能-javascript-引擎v8"}},[v._v("#")]),v._v(" 开篇词 | 如何学习谷歌高性能 JavaScript 引擎V8？")]),v._v(" "),a("p",[a("strong",[v._v("什么是 V8？")])]),v._v(" "),a("p",[v._v("V8 是 JavaScript 虚拟机的一种。我们可以简单地把 JavaScript 虚拟机理解成是一个翻译程序，将人类能够理解的编程语言 JavaScript，翻译成机器能够理解的机器语言。")]),v._v(" "),a("p",[v._v("目前市面上有很多种 JavaScript 引擎，诸如 SpiderMonkey、V8、JavaScriptCore 等。而由谷歌开发的开源项目 V8 是当下使用最广泛的 JavaScript 虚拟机，全球有超过 25 亿台安卓设备，而这些设备中都使用了 Chrome 浏览器，所以我们写的 JavaScript 应用，大都跑在 V8 上。")]),v._v(" "),a("p",[v._v("V8 之所以拥有如此庞大的生态圈，也和它许多革命性的设计是分不开的。")]),v._v(" "),a("p",[v._v("在 V8 出现之前，所有的 JavaScript 虚拟机所采用的都是解释执行的方式，这是 JavaScript 执行速度过慢的一个主要原因。而 V8 率先引入了即时编译（JIT）的双轮驱动的设计，这是一种权衡策略，混合编译执行和解释执行这两种手段，给 JavaScript 的执行速度带来了极大的提升。")]),v._v(" "),a("p",[v._v("V8 出现之后，各大厂商也都在自己的 JavaScript 虚拟机中引入了 JIT 机制，所以你会看到目前市面上 JavaScript 虚拟机都有着类似的架构。另外，V8 也是早于其他虚拟机引入了惰性编译、内联缓存、隐藏类等机制，进一步优化了 JavaScript 代码的编译执行效率。")]),v._v(" "),a("p",[v._v("可以说，V8 的出现，将 JavaScript 虚拟机技术推向了一个全新的高度。")]),v._v(" "),a("p",[v._v("即便 V8 具有诸多优点，但我相信对于大部分同学来说，V8 虚拟机还只是一个黑盒，我们将一段代码丢给这个黑盒，它便会返回结果，并没有深入了解过它的工作原理。")]),v._v(" "),a("p",[v._v("如果只是单纯使用 JavaScript 和调用 Web API，并不了解虚拟机内部是怎样工作的，在项目中遇到的很多问题很可能找不到解决的途径。比如，有时项目的占用内存过高，或者页面响应速度过慢，又或者使用 Node.js 的时候导致任务被阻塞等问题，都与 V8 的基本运行机制有关。如果你熟悉 V8 的工作机制，就会有系统性的思路来解决这些问题。")]),v._v(" "),a("p",[v._v("另外，V8 的主要功能，就是结合 JavaScript 语言的特性和本质来编译执行它。通过深入地学习 V8，你对 JavaScript 语言本质和设计思想会有很直观的感受。这些设计思想像是更加高级的工具，你掌握了它，就可以提升你的语言使用和架构设计水平。")]),v._v(" "),a("p",[a("br"),a("br")]),v._v(" "),a("p",[a("strong",[v._v("如何学习 V8？")])]),v._v(" "),a("p",[v._v("那么，我们应该如何来学习 V8 呢？")]),v._v(" "),a("p",[v._v("刚刚我们也说过，V8 的主要职责是用来执行 JavaScript 代码的，那我们首先需要先了解 JavaScript 这门语言的基本特性和设计思想。")]),v._v(" "),a("p",[v._v("JavaScript 借鉴了很多语言的特性，比如 C 语言的基本语法、Java 的类型系统和内存管理、Scheme 的函数作为一等公民，还有 Self 基于原型（prototype）的继承机制。毫无疑问，JavaScript 是一门非常优秀的语言，特别是“原型继承机制”和“函数是一等公民”这两个设计。")]),v._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"blogs/zh/images/04.jpg"}}),v._v(" "),a("p",[v._v("不过 JavaScript 也是一门处处是坑的语言，由于历史原因，很多错误的或者不合理的设计都被延续至今，比如使用 new 加构造函数来创建对象，这种方式的背后隐藏了太多的细节，非常容易增加代码出错概率，而且也大大增加了新手的学习成本；再比如初期的 JavaScript 没有块级作用域机制，使得 JavaScript 需要采取变量提升的策略，而变量提升又是非常反人性的设计。")]),v._v(" "),a("p",[v._v("V8 是 JavaScript 的实现，在学习 V8 工作原理时，我们就要格外关注 JavaScript 这些独特的设计思想和特性背后的实现。比如，为了实现函数是一等公民的特性，JavaScript 采取了基于对象的策略；再比如为了实现原型继承，V8 为每个对象引入了 "),a("strong",[v._v("proto")]),v._v(" 属性。")]),v._v(" "),a("p",[v._v("深入分析过 JavaScript 语言之后，我们就可以学习 V8 执行 JavaScript 代码的完整流程了。我们把这套流程称之为 V8 的编译流水线，其完整流程如下图所示：")]),v._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"blogs/zh/images/5.jpg"}}),v._v(" "),a("p",[v._v("编译流水线本身并不复杂，但是其中涉及到了很多技术，诸如 JIT、延迟解析、隐藏类、内联缓存等等。这些技术决定着一段 JavaScript 代码能否正常执行，以及代码的执行效率。")]),v._v(" "),a("p",[v._v("比如 V8 中使用的隐藏类（Hide Class），这是将 JavaScript 中动态类型转换为静态类型的一种技术，可以消除动态类型的语言执行速度过慢的问题，如果你熟悉 V8 的工作机制，在你编写 JavaScript 时，就能充分利用好隐藏类这种强大的优化特性，写出更加高效的代码。")]),v._v(" "),a("p",[v._v("再比如，V8 实现了 JavaScript 代码的惰性解析，目的是为了加速代码的启动速度，通过对惰性解析机制的学习，你可以优化你的代码更加适应这个机制，从而提高程序性能。")]),v._v(" "),a("p",[v._v("要想充分了解 V8 是怎么工作的，除了要分析编译流水线，我们还需要了解另外两个非常重要的特性，那就是事件循环系统和垃圾回收机制。")]),v._v(" "),a("p",[v._v("事件循环系统和 JavaScript 中的难点——异步编程特性紧密相关。我们知道，JavaScript 是单线程的，JavaScript 代码都是在一个线程上执行，如果同一时间发送了多个 JavaScript 执行的请求，就需要排队，也就是进行异步编程。")]),v._v(" "),a("p",[v._v("另外，JavaScript 是一种自动垃圾回收的语言，V8 在执行垃圾回收时，会占用主线程的资源，如果我们编写的程序频繁触发垃圾回收，那么无疑会阻塞主线程，这也是我们经常会遇到的一个问题。你需要知道 V8 是如何分配内存数据的，以及这些数据是如何被回收的，打通整个链路，建立完整的系统，当下次遇到内存问题时，就知道如何去排查了。")]),v._v(" "),a("p",[v._v("以上，就是系统学习 V8 的路径。在我们这一季的课程中，也会按照这样的思路来设计课程，来帮助你学习到 V8 的完整的知识体系。")]),v._v(" "),a("ul",[a("li",[v._v("首先，我们会从 JavaScript 的设计思想讲起，讨论它背后的一些主要特性，以及 V8 是怎么实现这些特性的。")]),v._v(" "),a("li",[v._v("然后，我们再来分析 V8 的编译流水线，在课程中间我们还会穿插介绍一些内存分配相关的内容，因为函数调用、变量声明、参数传递或者函数返回数值都涉及到了内存分配。")]),v._v(" "),a("li",[v._v("最后，我们会介绍事件循环系统和垃圾回收系统的工作机制。")])]),v._v(" "),a("p",[v._v("虽然本课程的篇幅不多，但是也具有一定的深度和广度。不过你并不需要担心内容太难，我会尽量将每节内容做到深入浅出，有什么问题你可以在留言区提问，我看到后都会第一时间来解答。")]),v._v(" "),a("p",[v._v("另外，在每个模块结束后，我会做一次热点问题的答疑，尽量帮你扫清学习 V8 的障碍。你需要做的是持之以恒地学习、反思与实践。")]),v._v(" "),a("p",[v._v("加油，从今天起，就让我们一起开始 V8 的学习旅程吧！")]),v._v(" "),a("br"),v._v(" "),a("br"),v._v(" "),a("h3",{attrs:{id:"_01-v8是如何执行一段javascript代码的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_01-v8是如何执行一段javascript代码的"}},[v._v("#")]),v._v(" 01 | V8是如何执行一段JavaScript代码的？")]),v._v(" "),a("p",[v._v("今天是我们整个课程的第一讲，我会从一个高层的宏观视角来解释什么是 V8，以及 V8 又是怎么执行一段 JavaScript 代码的。在这个过程中，我会引入一些核心概念，诸如 JIT、作用域、词法环境、执行上下文等，理解了这些概念，能够帮助你更好地理解 V8 是如何工作的，同时也能帮助你写出更加高效的 JavaScript 代码。")]),v._v(" "),a("p",[v._v("由于本节的目的是对 V8 做一个宏观的、全面的介绍，其目的是让你对 V8 的执行流程有个整体上的认识，所以涉及到的概念会比较多，如果你对其中一些概念不太理解也没有关系，在后面的章节中我会展开了详细地介绍。")]),v._v(" "),a("br"),v._v(" "),a("p",[a("strong",[v._v("什么是 V8？")])]),v._v(" "),a("p",[v._v("首先我们来看看什么是 V8。")]),v._v(" "),a("p",[v._v("V8 是一个由 Google 开发的开源 JavaScript 引擎，目前用在 Chrome 浏览器和 Node.js 中，其核心功能是执行易于人类理解的 JavaScript 代码。")]),v._v(" "),a("img",{staticStyle:{zoom:"75%"},attrs:{src:"blogs/zh/images/05.jpg"}}),v._v(" "),a("p",[v._v("那么 V8 又是怎么执行 JavaScript 代码的呢？")]),v._v(" "),a("p",[v._v("其主要核心流程分为编译和执行两步。首先需要将 JavaScript 代码转换为低级中间代码或者机器能够理解的机器代码，然后再执行转换后的代码并输出执行结果。")]),v._v(" "),a("img",{staticStyle:{zoom:"75%"},attrs:{src:"blogs/zh/images/6.jpg"}}),v._v(" "),a("p",[v._v("你可以把 V8 看成是一个虚构出来的计算机，也称为虚拟机，虚拟机通过模拟实际计算机的各种功能来实现代码的执行，如模拟实际计算机的 CPU、堆栈、寄存器等，虚拟机还具有它自己的一套指令系统。")]),v._v(" "),a("p",[v._v("所以对于 JavaScript 代码来说，V8 就是它的整个世界，当 V8 执行 JavaScript 代码时，你并不需要担心现实中不同操作系统的差异，也不需要担心不同体系结构计算机的差异，你只需要按照虚拟机的规范写好代码就可以了。")]),v._v(" "),a("p",[v._v("既然 V8 是虚构出来的计算机，用来编译和执行 JavaScript 代码，那么接下来我们就看看，为什么计算机需要对 JavaScript 这样的高级语言进行编译，以及编译完成后又是如何执行的。")]),v._v(" "),a("br"),v._v(" "),a("p",[a("strong",[v._v("高级代码为什么需要先编译再执行？")])]),v._v(" "),a("p",[v._v("我们先从 CPU 是怎么执行机器代码讲起，你可以把 CPU 看成是一个非常小的运算机器，我们可以通过二进制的指令和 CPU 进行沟通，比如我们给 CPU 发出“1000100111011000”的二进制指令，这条指令的意思是将一个寄存器中的数据移动到另外一个寄存器中，当处理器执行到这条指令的时候，便会按照指令的意思去实现相关的操作。")]),v._v(" "),a("p",[v._v("为了能够完成复杂的任务，工程师们为 CPU 提供了一大堆指令，来实现各种功能，我们就把这一大堆指令称为"),a("strong",[v._v("指令集（Instructions）")]),v._v("，也就是"),a("strong",[v._v("机器语言")]),v._v("。")]),v._v(" "),a("p",[v._v("注意，CPU 只能识别二进制的指令，但是对程序员来说，二进制代码难以阅读和记忆，于是我们又将二进制指令集转换为人类可以识别和记忆的符号，这就是"),a("strong",[v._v("汇编指令集")]),v._v("，你可以参考下面的代码：")]),v._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[v._v("1000100111011000")]),v._v("  机器指令\nmov ax,bx         汇编指令\n")])]),v._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[v._v("1")]),a("br"),a("span",{staticClass:"line-number"},[v._v("2")]),a("br")])]),a("p",[v._v("那么你可能会问，CPU 能直接识别汇编语言吗？")]),v._v(" "),a("p",[v._v("答案是“不能”，所以如果你使用汇编编写了一段程序，你还需要一个汇编编译器，其作用是将汇编代码编程成机器代码，具体流程你可以参考下图：")]),v._v(" "),a("img",{staticStyle:{zoom:"75%"},attrs:{src:"blogs/zh/images/06.jpg"}}),v._v(" "),a("p",[v._v("虽然汇编语言对机器语言做了一层抽象，减少了程序员理解机器语言的复杂度，但是汇编语言依然是复杂且繁琐的，即便你写一个非常简单的功能，也需要实现大量的汇编代码，这主要表现在以下两点。")]),v._v(" "),a("p",[v._v("首先，"),a("strong",[v._v("不同的 CPU 有着不同的指令集")]),v._v("，如果要使用机器语言或者汇编语言来实现一个功能，那么你需要为每种架构的 CPU 编写特定的汇编代码，这会带来巨大的、枯燥繁琐的操作。")]),v._v(" "),a("p",[v._v("其次，"),a("strong",[v._v("在编写汇编代码时，我们还需要了解和处理器架构相关的硬件知识")]),v._v("，比如你需要使用寄存器、内存、操作 CPU 等。大部分程序员在编写应用的时候，只想专心处理业务逻辑，并不想要过多地理会这些处理器架构相关的细节。")]),v._v(" "),a("p",[v._v("因此我们需要一种屏蔽了计算机架构细节的语言，能适应多种不同 CPU 架构的语言，能专心处理业务逻辑的语言，诸如 C、C++、Java、C#、Python、JavaScript 等，这些“高级语言”就应运而生了。")]),v._v(" "),a("p",[v._v("和汇编语言一样，处理器也不能直接识别由高级语言所编写的代码，那怎么办呢？通常，要有两种方式来执行这些代码。")]),v._v(" "),a("p",[v._v("第一种是解释执行，需要先将输入的源代码通过解析器编译成中间代码，之后直接使用解释器解释执行中间代码，然后直接输出结果。具体流程如下图所示：")]),v._v(" "),a("p",[v._v("未完待续……")]),v._v(" "),a("br"),v._v(" "),a("br"),v._v(" "),a("br"),v._v(" "),a("br"),v._v(" "),a("br"),v._v(" "),a("h2",{attrs:{id:"javascript设计思想篇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript设计思想篇"}},[v._v("#")]),v._v(" JavaScript设计思想篇")])])}),[],!1,null,null,null);a.default=r.exports}}]);